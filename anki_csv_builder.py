import streamlit as st
import pandas as pd
import re
import csv
import io
import json
from typing import List, Dict
from openai import OpenAI
# ==========================
# –ú–æ–¥–µ–ª–∏: –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ + –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥—Ä—É–∑–∫–∞ –∏–∑ API
# ==========================
from typing import List

DEFAULT_MODELS: List[str] = [
    "gpt-5",
    "gpt-5-mini",
    "gpt-5-nano",
    "gpt-4.1",
    "gpt-4o",
    "gpt-4o-mini",
    "o3-mini",
]

_PREFERRED_ORDER = {  # —á–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ ‚Äî —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ
    "gpt-5": 0,
    "gpt-5-mini": 1,
    "gpt-5-nano": 2,
    "gpt-4.1": 3,
    "gpt-4o": 4,
    "gpt-4o-mini": 5,
    "o3": 6,
    "o3-mini": 7,
}

def _sort_key(model_id: str) -> tuple:
    for k, rank in _PREFERRED_ORDER.items():
        if model_id.startswith(k):
            return (rank, model_id)
    return (999, model_id)

def get_model_options(api_key: str | None) -> List[str]:
    """–í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –º–æ–¥–µ–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–ø—Ä–æ—Å–∏—Ç—å —É API, –∏–Ω–∞—á–µ ‚Äî –¥–µ—Ñ–æ–ª—Ç."""
    prefixes = ("gpt-5", "gpt-4.1", "gpt-4o", "o3")
    if not api_key:
        return DEFAULT_MODELS
    try:
        client = OpenAI(api_key=api_key)
        models = client.models.list()
        ids = []
        for m in getattr(models, "data", []) or []:
            mid = getattr(m, "id", "")
            if any(mid.startswith(p) for p in prefixes):
                ids.append(mid)
        if not ids:
            return DEFAULT_MODELS
        return sorted(set(ids), key=_sort_key)
    except Exception:
        return DEFAULT_MODELS

# ===== –£—Å–∏–ª–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π =====
PROMPT_SYSTEM = (
    "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ NL‚ÜíRU –∏ –∞–≤—Ç–æ—Ä —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. "
    "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –°–¢–†–û–ì–û JSON-–æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ Anki —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: "
    "{woord, cloze_sentence, ru_sentence, collocaties, def_nl, ru_short}.\n"
    "–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê (–û–ß–ï–ù–¨ –í–ê–ñ–ù–û):\n"
    "‚Ä¢ –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –ë–ï–ó –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
    "‚Ä¢ –ù–ò –û–î–ù–û –ø–æ–ª–µ –Ω–µ –ø—É—Å—Ç–æ–µ. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.\n"
    "‚Ä¢ –°–∏–º–≤–æ–ª '|' –≤ —Ç–µ–∫—Å—Ç–∞—Ö –∑–∞–ø—Ä–µ—â—ë–Ω.\n"
    "‚Ä¢ –ï—Å–ª–∏ –¥–∞–Ω–æ def_nl ‚Äî —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –µ–º—É; –Ω–µ –º–µ–Ω—è–π –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞.\n"
    "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π —á–∞—Å—Ç—å —Ä–µ—á–∏: ru_short –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏ —Ä–µ—á–∏ —Å–ª–æ–≤–∞ "
    "(–≥–ª–∞–≥–æ–ª‚Üí–∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤; —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ‚Üí—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ; –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ‚Üí–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ).\n"
    "‚Ä¢ ru_sentence ‚Äî –¢–û–ß–ù–´–ô –ø–µ—Ä–µ–≤–æ–¥ NL-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∞.\n"
    "‚Ä¢ cloze_sentence ‚Äî –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ NL-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (8‚Äì14 —Å–ª–æ–≤, –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è, "
    "–±–µ–∑ –∏–º—ë–Ω/—Ü–∏—Ñ—Ä/–∫–∞–≤—ã—á–µ–∫); —Ü–µ–ª–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ {{c1::‚Ä¶}}.\n"
    "  –ï—Å–ª–∏ —Å–ª–æ–≤–æ ‚Äî —Ä–∞–∑–¥–µ–ª–∏–º—ã–π –≥–ª–∞–≥–æ–ª: {{c1::stam}} ‚Ä¶ {{c2::partikel}}. –ò–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ {{c1::‚Ä¶}}.\n"
    "‚Ä¢ collocaties ‚Äî –†–û–í–ù–û 3 —á–∞—Å—Ç–æ—Ç–Ω—ã–µ —Å–≤—è–∑–∫–∏, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '; ' (—Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª).\n"
    "  –ö–∞–∂–¥–∞—è —Å–≤—è–∑–∫–∞ ‚Äî 2‚Äì3 —Å–ª–æ–≤–∞ —Å —Ü–µ–ª–µ–≤—ã–º —Å–ª–æ–≤–æ–º –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ. –ù–µ–ª—å–∑—è: –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã "
    "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 'een grote caissi√®re'), —Ä–µ–¥–∫–∏–µ/–∫–Ω–∏–∂–Ω—ã–µ, –∏–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ.\n"
    "‚Ä¢ –ò–∑–±–µ–≥–∞–π —Ä–µ–¥–∫–æ–π –ª–µ–∫—Å–∏–∫–∏; –∏—Å–ø–æ–ª—å–∑—É–π A2‚ÄìB1 –≤–æ–∫—Ä—É–≥ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.\n\n"
    "–§–û–†–ú–ê–¢ –í–´–í–û–î–ê: –æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏: woord, cloze_sentence, ru_sentence, collocaties, def_nl, ru_short.\n\n"
    "–ü–†–ò–ú–ï–†–´ (—Å—Ç–∏–ª—å, –ù–ï –∫–æ–ø–∏—Ä—É–π —Å–ª–æ–≤–∞):\n"
    "// –°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ\n"
    "{\"woord\": \"boodschap\", \"cloze_sentence\": \"Hij doet elke dag de {{c1::boodschap}}.\", "
    "\"ru_sentence\": \"–û–Ω –¥–µ–ª–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\", "
    "\"collocaties\": \"boodschappen doen; een boodschap doorgeven; een duidelijke boodschap\", "
    "\"def_nl\": \"iets wat je wilt zeggen of inkopen die je doet\", \"ru_short\": \"–ø–æ–∫—É–ø–∫–∞; –ø–æ—Å–ª–∞–Ω–∏–µ\"}\n"
    "// –†–∞–∑–¥–µ–ª–∏–º—ã–π –≥–ª–∞–≥–æ–ª\n"
    "{\"woord\": \"opruimen\", \"cloze_sentence\": \"Na het eten {{c1::ruimt}} hij de tafel {{c2::op}}.\", "
    "\"ru_sentence\": \"–ü–æ—Å–ª–µ –µ–¥—ã –æ–Ω —É–±–∏—Ä–∞–µ—Ç —Å–æ —Å—Ç–æ–ª–∞.\", "
    "\"collocaties\": \"de kamer opruimen; speelgoed opruimen; netjes opruimen\", "
    "\"def_nl\": \"iets op zijn plaats leggen zodat het netjes is\", \"ru_short\": \"—É–±–∏—Ä–∞—Ç—å\"}\n"
    "// –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ\n"
    "{\"woord\": \"streng\", \"cloze_sentence\": \"De docent is vandaag {{c1::streng}}.\", "
    "\"ru_sentence\": \"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–µ–≥–æ–¥–Ω—è —Å—Ç—Ä–æ–≥–∏–π.\", "
    "\"collocaties\": \"strenge regels; een strenge docent; streng optreden\", "
    "\"def_nl\": \"met veel eisen en weinig toelating\", \"ru_short\": \"—Å—Ç—Ä–æ–≥–∏–π\"}"
)


st.set_page_config(page_title="Anki CSV Builder", layout="wide")
# ==========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ==========================

def sanitize_field(value: str) -> str:
    if value is None:
        return ""
    return str(value).replace("|", "‚à£").strip()


# ==========================
# Session state (prevents reset on rerun)
# ==========================
if "input_data" not in st.session_state:
    st.session_state.input_data: List[Dict] = []
if "results" not in st.session_state:
    st.session_state.results: List[Dict] = []

# --- SIDEBAR ---
st.sidebar.header("üîê API Settings")
api_key = (
    st.secrets.get("OPENAI_API_KEY")
    if "OPENAI_API_KEY" in st.secrets
    else st.sidebar.text_input("OpenAI API Key", type="password")
)

# –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫)
options = get_model_options(api_key)
model = st.sidebar.selectbox(
    "Model",
    options,
    index=0,
    help="–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Äî gpt-5 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω); –±–∞–ª–∞–Ω—Å ‚Äî gpt-4.1; –±—ã—Å—Ç—Ä–µ–µ/–¥–µ—à–µ–≤–ª–µ ‚Äî gpt-4o / gpt-5-mini."
)

# (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) —Ç–æ—á–Ω—ã–π ID —Å–Ω–∞–ø—à–æ—Ç–∞ –º–æ–¥–µ–ª–∏
custom = st.sidebar.text_input("Custom model id (optional)", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, gpt-5-2025-08-07")
if custom.strip():
    model = custom.strip()

temperature = st.sidebar.slider("Temperature", 0.2, 0.8, 0.4, 0.1)



stream_output = st.sidebar.checkbox("Stream output (beta)", value=False,
    help="Streaming –≤ Responses API: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π JSON –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞")

# ==========================
# Demo data
# ==========================
demo_words = [
    {"woord": "aanraken", "def_nl": "iets met je hand of een ander deel van je lichaam voelen"},
    {"woord": "begrijpen", "def_nl": "snappen wat iets betekent of inhoudt"},
    {"woord": "gillen", "def_nl": "hard en hoog schreeuwen"},
    {"woord": "kloppen", "def_nl": "met regelmaat bonzen of tikken"},
    {"woord": "toestaan", "def_nl": "goedkeuren of laten gebeuren"},
    {"woord": "opruimen", "def_nl": "iets netjes maken door het op zijn plaats te leggen"},
]

st.title("üìò Anki CSV Builder ‚Äî Cloze Cards from Dutch Words")

# ==========================
# Parsers
# ==========================

def parse_input(text: str) -> List[Dict]:
    rows: List[Dict] = []
    lines = text.strip().splitlines()

    for raw in lines:
        line = raw.strip()
        if not line:
            continue

        # 1) Markdown-—Ç–∞–±–ª–∏—Ü–∞: | **woord** | definitie NL | RU |
        if line.startswith("|") and "**" in line:
            parts = [p.strip() for p in line.strip("|").split("|")]
            if len(parts) >= 3:
                woord = re.sub(r"\*", "", parts[0]).strip()
                def_nl = parts[1].strip()
                ru_short = parts[2].strip()
                entry = {"woord": woord}
                if def_nl:
                    entry["def_nl"] = def_nl
                if ru_short:
                    entry["ru_short"] = ru_short
                rows.append(entry)
            continue

        # 4) TSV: woord 	 def_nl  (2 –∫–æ–ª–æ–Ω–∫–∏, –±–µ–∑ —à–∞–ø–∫–∏)
        if "	" in line:
            tparts = [p.strip() for p in line.split("	")]
            if len(tparts) == 2:
                rows.append({"woord": tparts[0], "def_nl": tparts[1]})
                continue

        # 2) –ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π: woord ‚Äî def NL ‚Äî RU  |  woord ‚Äî def NL
        if " ‚Äî " in line:
            parts = [p.strip() for p in line.split(" ‚Äî ")]
            if len(parts) == 3:
                rows.append({"woord": parts[0], "def_nl": parts[1], "ru_short": parts[2]})
                continue
            if len(parts) == 2:
                rows.append({"woord": parts[0], "def_nl": parts[1]})
                continue

        # 3) –ü—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–æ
        rows.append({"woord": line})

    return rows

# ==========================
# File upload + demo button
# ==========================
uploaded_file = st.file_uploader("Upload een bestand (.txt / .md)", type=["txt", "md"], accept_multiple_files=False)

col_a, col_b = st.columns([1,1])
with col_a:
    if st.button("Try demo", type="secondary"):
        st.session_state.input_data = demo_words
        st.toast("üîÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-–Ω–∞–±–æ—Ä –∏–∑ 6 —Å–ª–æ–≤", icon="‚úÖ")
with col_b:
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å", type="secondary"):
        st.session_state.input_data = []
        st.session_state.results = []

if uploaded_file is not None:
    try:
        file_text = uploaded_file.read().decode("utf-8")
    except UnicodeDecodeError:
        uploaded_file.seek(0)    
        file_text = uploaded_file.read().decode("utf-16")
    st.session_state.input_data = parse_input(file_text)

# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
if st.session_state.input_data:
    st.subheader("üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏")
    st.dataframe(pd.DataFrame(st.session_state.input_data), use_container_width=True)
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ **Try demo**")

# ==========================
# Helpers
# ==========================



def call_openai_card(client: OpenAI, row: Dict, model: str, temperature: float) -> Dict:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å SDK >=1.0: –±–µ–∑ response_format. –ü—Ä–æ—Å–∏–º –°–¢–†–û–ì–ò–ô JSON –∏ –ø–∞—Ä—Å–∏–º output_text."""
    system_instructions = PROMPT_SYSTEM

    user_payload = {
        "woord": row.get("woord", "").strip(),
        "def_nl": row.get("def_nl", "").strip(),
        "ru_short": row.get("ru_short", "").strip(),
    }

    # Responses API –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É: instructions + input
    final = client.responses.create(
        model=model,
        instructions=system_instructions,
        input=(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
            + json.dumps(user_payload, ensure_ascii=False)
            + "\n–í–µ—Ä–Ω–∏ –°–¢–†–û–ì–û JSON —Å –ø–æ–ª—è–º–∏: "
              "woord, cloze_sentence, ru_sentence, collocaties, def_nl, ru_short."
        ),
        temperature=temperature,
    )

    # –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –∏ –≤—ã—Ä–µ–∑–∞–µ–º JSON
    text = getattr(final, "output_text", "") or ""
    m = re.search(r"\{[\s\S]*\}", text)
    parsed = json.loads(m.group(0)) if m else {}

    # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è '|' ‚Üí '‚à£'
    def sf(x: str) -> str:
        return (x or "").replace("|", "‚à£").strip()

    return {
        "woord": sf(parsed.get("woord", user_payload["woord"])),
        "cloze_sentence": sf(parsed.get("cloze_sentence", "")),
        "ru_sentence": sf(parsed.get("ru_sentence", "")),
        "collocaties": sf(parsed.get("collocaties", "")),
        "def_nl": sf(parsed.get("def_nl", user_payload.get("def_nl", ""))),
        "ru_short": sf(parsed.get("ru_short", user_payload.get("ru_short", ""))),
    }


# ==========================
# Generate section
# ==========================
if st.session_state.input_data:
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å CSV", type="primary"):
        if not api_key:
            st.error("–£–∫–∞–∂–∏ OPENAI_API_KEY –≤ Secrets –∏–ª–∏ –≤ –ø–æ–ª–µ —Å–ª–µ–≤–∞.")
        else:
            client = OpenAI(api_key=api_key)
            st.session_state.results = []
            progress = st.progress(0)
            total = len(st.session_state.input_data)

            for idx, row in enumerate(st.session_state.input_data):
                try:
                    card = call_openai_card(client, row, model=model, temperature=temperature)
                    st.session_state.results.append(card)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞ '{row.get('woord','?')}': {e}")
                finally:
                    progress.progress(int((idx + 1) / max(total,1) * 100))

# ==========================
# Preview & download
# ==========================
if st.session_state.results:
    st.subheader("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–µ—Ä–≤—ã–µ 20)")
    preview_df = pd.DataFrame(st.session_state.results)[:20]
    st.dataframe(preview_df, use_container_width=True)

  # CSV –±—É—Ñ–µ—Ä
    csv_buffer = io.StringIO()
    writer = csv.writer(csv_buffer, delimiter='|', lineterminator='\n')
    writer.writerow([
        "NL-—Å–ª–æ–≤–æ",
        "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ NL (—Å cloze)",
        "–ü–µ—Ä–µ–≤–æ–¥ RU",
        "–ö–æ–ª–ª–æ–∫–∞—Ü–∏–∏",
        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ NL",
        "–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ RU",
    ])
    for r in st.session_state.results:
        writer.writerow([
            r.get('woord',''),
            r.get('cloze_sentence',''),
            r.get('ru_sentence',''),
            r.get('collocaties',''),
            r.get('def_nl',''),
            r.get('ru_short',''),
        ])

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å anki_cards.csv",
        data=csv_buffer.getvalue(),
        file_name="anki_cards.csv",
        mime="text/csv",
    )

# ==========================
# Footer help
# ==========================
st.caption(
    "–°–æ–≤–µ—Ç—ã: 1) –¥–æ–±–∞–≤–ª—è–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ NL-–¥–µ—Ñ–∏–Ω–∏—Ü–∏–∏ –≤–æ –≤—Ö–æ–¥ ‚Äî —ç—Ç–æ —É–ª—É—á—à–∏—Ç –ø—Ä–∏–º–µ—Ä—ã; "
    "2) –µ—Å–ª–∏ –≤–∏–¥–∏—à—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–æ–∫–∞—Ü–∏–∏ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞, "
    "3) —Å–∏–º–≤–æ–ª '|' –≤ —Ç–µ–∫—Å—Ç–∞—Ö –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ '‚à£'."
)
